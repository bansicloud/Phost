/**
 * Phost, your story
 * (c) 2018, Daniel James
 * 
 * Cecelia Post Editor
 * 
 * @package Phost
 */

$(document).ready(function() {

	// Keyboard shortcuts
	$(window).keydown(function(e) {

		var keyPressed = String.fromCharCode(e.which);

		// Ctrl / Cmd
		if (e.ctrlKey || e.keyCode === 91 || e.keyCode === 93 || e.keyCode === 224) {

			// Ctrl + Shift
			if (e.shiftKey) {

				switch (keyPressed) {

					case 'U':
						e.preventDefault();
						addMarkdown($('#strikethrough'));
					break;

					case 'K':
						e.preventDefault();
						addMarkdown($('#code'));
					break;

					case 'I':
						e.preventDefault();
						addMarkdown($('#image'));
					break;

				}

			} else {

				switch (keyPressed) {

					case 'H':
						e.preventDefault();
						addMarkdown($('#heading'));
					break;

					case 'B':
						e.preventDefault();
						addMarkdown($('#bold'));
					break;

					case 'I':
						e.preventDefault();
						addMarkdown($('#italic'));
					break;

					case 'K':
						e.preventDefault();
						addMarkdown($('#link'));
					break;

					case 'L':
						e.preventDefault();
						addMarkdown($('#list'));
					break;

					case 'O':
						e.preventDefault();
						addMarkdown($('#olist'));
					break;

					case 'Q':
						e.preventDefault();
						addMarkdown($('#quote'));
					break;

				}

			}

		}

	});

	// Sets cursor position (in textarea)
	$.fn.setCursorPos = function(pos) {
		return this.each(function() {
			this.selectionStart = pos;
			this.selectionEnd = pos;
		});
	}

	// Parses markdown every time the input field changes (is typed in etc)
	$('#editor__textarea').bind('input propertychange', function() {

		var charCount = $(this).val().length;
		$('#editor__charcount').text(charCount);

	});

	// Adds markdown syntax to cursor position
	function addMarkdown($btn = null, $txt = $("#editor__textarea")) {

		var caretPos = $txt[0].selectionStart;
		var textAreaTxt = $txt.val();

		// Adds text markdown syntax to current cursor position
		var syntax = $btn.attr('data-syntax');

		if (syntax === '# ' || syntax === '> ') {

			if (textAreaTxt.substring(caretPos-2, caretPos) === syntax) {

				$txt.val(textAreaTxt.substring(0, caretPos-1) + syntax + textAreaTxt.substring(caretPos));

			} else {

				$txt.val(textAreaTxt.substring(0, caretPos) + syntax + textAreaTxt.substring(caretPos));

			}

		} else {

			$txt.val(textAreaTxt.substring(0, caretPos) + syntax + textAreaTxt.substring(caretPos));

		}


		// Places cursor in between syntax beginning and end
		$('#editor__textarea').focus();

		// Syntax which don't contain closing syntax
		if (syntax.length === 1 || syntax === '[]()') {

			$('#editor__textarea').setCursorPos(caretPos + 1);

		} else if (syntax === '# ' || syntax === '- ' || syntax === '> ') {

			$('#editor__textarea').setCursorPos(caretPos + 2);

		} else if (syntax === '1. ') {

			$('#editor__textarea').setCursorPos(caretPos + 3);

		} else {

			// Places cursor between opening and closing syntax
			$('#editor__textarea').setCursorPos(caretPos + syntax.length/2);

		}

	}

	// Button click handler
	$('.editor__toolbar a').click(function() {

		addMarkdown($(this));

	});

});

